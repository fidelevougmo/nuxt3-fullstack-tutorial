name: Automated Deployment Experiment


on:
  push:
    branches: [ "feature/deployment-experiments" ]

jobs:
  # test-application:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [ 16.17.0 ]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: 'yarn'
  #     - run: yarn
  #     - run: yarn build
  #     - run: yarn test

  create-deployment-artifacts:
    # needs: test-application
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16.17.0 ]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      - run: |
          touch .env
          echo STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_TEST_KEY }} >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo APP_DOMAIN=https://fullstackjack.dev >> .env
      - run: yarn
      - run: yarn build
      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_TEST_KEY }}
        run: tar -czf "${GITHUB_SHA}".tar.gz .output

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  prepare-release-on-servers:
    needs: create-deployment-artifacts
    name: "Prepare release on INT server"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: "49.12.188.8"
          port: "22"
          username: "root"
          key: ${{ secrets.SSH_KEY }}
          source: ${{ github.sha }}.tar.gz
          target: /var/www/html/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: "49.12.188.8"
          username: "root"
          key: ${{ secrets.SSH_KEY }}
          port: "22"
          envs: GITHUB_SHA
          script: |
            mkdir -p "/var/www/html/releases/${GITHUB_SHA}"
            tar xzf /var/www/html/artifacts/${GITHUB_SHA}.tar.gz -C "/var/www/html/releases/${GITHUB_SHA}"
            rm -rf /var/www/html/releases/${GITHUB_SHA}/storage


  activate-release:
    name: "Activate release"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers ]
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: /var/www/html/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: /var/www/html/live
        with:
          host: "49.12.188.8"
          username: "root"
          key: ${{ secrets.SSH_KEY }}
          port: "22"
          envs: RELEASE_PATH,ACTIVE_RELEASE_PATH
          script: |
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            systemctl restart fullstackjack
            chown -R www-data:www-data ${RELEASE_PATH}

  clean-up:
    name: "Clean up old versions"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, activate-release ]
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: /var/www/html/releases
          ARTIFACTS_PATH: /var/www/html/artifacts
        with:
          host: "49.12.188.8"
          username: "root"
          key: ${{ secrets.SSH_KEY }}
          port: "22"
          envs: RELEASES_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +4 | xargs rm -rf
            cd $ARTIFACTS_PATH && echo "now cleaning . . . ." && pwd && ls && echo "files to clean . . . ." && ls -t -1 && ls -t -1 | tail -n +4 | xargs rm -rf
      # delete-artifact
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: create-deployment-artifacts